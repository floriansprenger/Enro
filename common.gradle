def versionProperties = new Properties()
versionProperties.load(new FileInputStream(rootProject.file("version.properties")))

ext.versionCode = versionProperties.getProperty("versionCode").toInteger()
ext.versionName = versionProperties.getProperty("versionName")

def privateProperties = new Properties()
def privatePropertiesFile = rootProject.file("private.properties")
if(privatePropertiesFile.exists()) {
    privateProperties.load(new FileInputStream(rootProject.file("private.properties")))
}
else {
    privateProperties.setProperty("githubUser", System.getenv("PUBLISH_GITHUB_USER") ?: "MISSING")
    privateProperties.setProperty("githubToken", System.getenv("PUBLISH_GITHUB_TOKEN") ?: "MISSING")
}

ext.androidLibrary = {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'

    android {
        compileSdkVersion 29

        defaultConfig {
            minSdkVersion 16
            targetSdkVersion 29
            versionCode versionCode
            versionName versionName

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            consumerProguardFiles "consumer-rules.pro"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
    }

    kotlin {
        explicitApi()
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

ext.publishAndroidModule = { String groupName, String moduleName ->
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    ext["signing.keyId"] = privateProperties['signingKeyId']
    ext["signing.password"] = privateProperties['signingKeyPassword']
    ext["signing.secretKeyRingFile"] = privateProperties['signingKeyLocation']

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
    }

    afterEvaluate {
        group = groupName
        version = versionName

        publishing {
            publications {
                release(MavenPublication) {
                    from components.release

                    groupId groupName
                    artifactId moduleName
                    version versionName

                    artifact androidSourcesJar

                    pom {
                        name = moduleName
                        description = ""
                        url = "https://github.com/isaac-udy/Enro"
                        licenses {
                            license {
                                name = 'Enro License'
                                url = 'https://github.com/isaac-udy/Enro/blob/main/LICENSE'
                            }
                        }
                        developers {
                            developer {
                                id = 'isaac.udy'
                                name = 'Isaac Udy'
                                email = 'isaac.udy@gmail.com'
                            }
                        }
                        scm {
                            connection = 'scm:git:github.com/isaac-udy/Enro.git'
                            developerConnection = 'scm:git:ssh://github.com/isaac-udy/Enro.git'
                            url = 'https://github.com/isaac-udy/Enro/tree/main'
                        }
                        withXml {
                            def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                            // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                            configurations.implementation.allDependencies.each {
                                // Ensure dependencies such as fileTree are not included.
                                if (it.name != 'unspecified') {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }

            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/isaac-udy/Enro")
                    credentials {
                        username = privateProperties['githubUser']
                        password = privateProperties['githubToken']
                    }
                }
            }

            repositories {
                maven {
                    // This is an arbitrary name, you may also use "mavencentral" or
                    // any other name that's descriptive for you
                    name = "sonatype"
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username privateProperties['sonatypeUser']
                        password privateProperties['sonatypePassword']
                    }
                }
            }
        }

        signing {
            sign publishing.publications
        }
    }

    afterEvaluate {
        tasks.findByName("publishToMavenLocal")
                .dependsOn("assembleRelease")

        tasks.findByName("publish")
                .dependsOn("publishToMavenLocal")

        tasks.findByName("publishAllPublicationsToSonatypeRepository")
                .dependsOn("publishToMavenLocal")
    }
}

ext.publishJavaModule = { String groupName, String moduleName ->
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    ext["signing.keyId"] = privateProperties['signingKeyId']
    ext["signing.password"] = privateProperties['signingKeyPassword']
    ext["signing.secretKeyRingFile"] = privateProperties['signingKeyLocation']

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.java.srcDirs
    }

    artifacts {
        archives sourcesJar
    }

    afterEvaluate {
        group = groupName
        version = versionName

        publishing {
            publications {
                jar(MavenPublication) {
                    from components.java

                    groupId groupName
                    artifactId moduleName
                    version versionName

                    artifact sourcesJar

                    pom {
                        name = moduleName
                        description = ""
                        url = "https://github.com/isaac-udy/Enro"
                        licenses {
                            license {
                                name = 'Enro License'
                                url = 'https://github.com/isaac-udy/Enro/blob/main/LICENSE'
                            }
                        }
                        developers {
                            developer {
                                id = 'isaac.udy'
                                name = 'Isaac Udy'
                                email = 'isaac.udy@gmail.com'
                            }
                        }
                        scm {
                            connection = 'scm:git:github.com/isaac-udy/Enro.git'
                            developerConnection = 'scm:git:ssh://github.com/isaac-udy/Enro.git'
                            url = 'https://github.com/isaac-udy/Enro/tree/main'
                        }
                    }
                }
            }

            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/isaac-udy/Enro")
                    credentials {
                        username = privateProperties['githubUser']
                        password = privateProperties['githubToken']
                    }
                }
            }
            repositories {
                maven {
                    // This is an arbitrary name, you may also use "mavencentral" or
                    // any other name that's descriptive for you
                    name = "sonatype"
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username privateProperties['sonatypeUser']
                        password privateProperties['sonatypePassword']
                    }
                }
            }
        }

        signing {
            sign publishing.publications
        }
    }

    afterEvaluate {
        tasks.findByName("publishToMavenLocal")
                .dependsOn("assemble")

        tasks.findByName("publishAllPublicationsToSonatypeRepository")
                .dependsOn("publishToMavenLocal")

        tasks.findByName("publish")
                .dependsOn("publishToMavenLocal")
    }
}