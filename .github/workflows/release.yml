name: Release
on:
  workflow_dispatch:
    inputs:
      versionname:
        description: 'Version Name'
        required: true
        default: ''
      changes:
        description: 'Release notes'
        required: true
        default: ''
jobs:
  release:
    name: Release
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3.9.0
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching"

      - name: Run Enro Tests
        uses: reactivecircus/android-emulator-runner@v2
        id: testing
        continue-on-error: true
        with:
          api-level: 30
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb logcat -c                             # clear logs
            touch ~/appemulator.log                    # create log file
            chmod 777 ~/appemulator.log                # allow writing to log file
            adb logcat >> ~/appemulator.log &          # pipe all logcat messages into log file as a background process
            ./gradlew :enro:connectedCheck :enro:testDebugUnitTest :enro:hilt-test:connectedCheck :modularised-example:app:testDebugUnitTest

      - name: Upload Failing Test Report Log
        if: steps.testing.outcome != 'success'        # upload the generated log on failure of the tests job
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ~/appemulator.log # path to where the log is

      - name: Fail for Test
        if: steps.testing.outcome != 'success'
        run: exit 1

      - name: Install gpg secret key
        run: cat <(echo -e "${{ secrets.PUBLISH_SIGNING_KEY_LITERAL }}") | gpg --batch --import

      - name: List gpg secret keys
        run: gpg --list-secret-keys --keyid-format LONG

      - name: Export gpg secret key
        run: sudo gpg --export-secret-keys --pinentry-mode loopback --passphrase=${{ secrets.PUBLISH_SIGNING_KEY_PASSWORD }} ${{ secrets.PUBLISH_SIGNING_KEY_ID }} > ${{ secrets.PUBLISH_SIGNING_KEY_LOCATION }}

      - name: Update Version Name
        run: ./gradlew updateVersion -PversionName=${{ github.event.inputs.versionname }}

      - name: Publish Release
        env:
          PUBLISH_GITHUB_USER: ${{ secrets.PUBLISH_GITHUB_USER }}
          PUBLISH_GITHUB_TOKEN: ${{ secrets.PUBLISH_GITHUB_TOKEN }}
          PUBLISH_SONATYPE_USER: ${{ secrets.PUBLISH_SONATYPE_USER }}
          PUBLISH_SONATYPE_PASSWORD: ${{ secrets.PUBLISH_SONATYPE_PASSWORD }}
          PUBLISH_SIGNING_KEY_ID: ${{ secrets.PUBLISH_SIGNING_KEY_ID }}
          PUBLISH_SIGNING_KEY_PASSWORD: ${{ secrets.PUBLISH_SIGNING_KEY_PASSWORD }}
          PUBLISH_SIGNING_KEY_LOCATION: ${{ secrets.PUBLISH_SIGNING_KEY_LOCATION }}
        run: ./gradlew publishAllPublicationsToSonatypeRepository --no-parallel # publishAllPublicationsToGitHubPackagesRepository

      - name: Update Repo
        uses: EndBug/add-and-commit@v5
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_GITHUB_TOKEN }}
        with:
          add: "./version.properties"
          message: ${{ format('Released {0}', github.event.inputs.versionname) }}
          push: true

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.versionname }}
          release_name: Release ${{ github.event.inputs.versionname }}
          body: ${{  github.event.inputs.changes }}
          draft: false
          prerelease: false
